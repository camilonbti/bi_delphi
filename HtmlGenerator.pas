unit HtmlGenerator;

interface

uses
  System.Classes, System.SysUtils;

type
  THtmlGenerator = class
  private
    const
      CHART_JS_URL = 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js';

//    class function GerarDoctype: string;
//    class function GerarTitulo: string;

//    class function GerarDoctype: string;
//    class function GerarMetaTags: string;
//    class function GerarEstilos: string;
//    class function GerarScriptChartJs: string;
//    class function GerarHeadCompleto: string;
//    class function GerarEstruturaMain: string;
//    class function GerarHeader: string;
//    class function GerarNavFiltros: string;
//    class function GerarSecaoKPIs: string;
//    class function GerarSecaoGraficos: string;
//    class function GerarSecaoTabela: string;
//    class function GerarSecaoPaginacao: string;
//    class function GerarBotaoExportar: string;
//    class function GerarScriptVariaveis: string;
//    class function GerarScriptConstantes: string;
//    class function GerarScriptFuncoes: string;
//    class function GerarScriptEventos: string;
//    class function GerarScriptInicializacao: string;

  public
    class function GerarHTML: string;
  end;

implementation

uses uPrincipal, HtmlGenerator_CSS, HtmlGenerator_DATASET,
  HtmlGenerator_Cores, HtmlGenerator_JS_Charts;


class function THtmlGenerator.GerarHTML: string;
var
  HTML: TStringList;
begin
  HTML := TStringList.Create;
  try
    HTML.Text := UTF8String(HTML.Text);
    DefaultSystemCodePage := CP_UTF8;


    HTML.Add('<!DOCTYPE html>');
    HTML.Add('<html lang="pt-BR">');
    HTML.Add('<head>');
    HTML.Add('    <meta charset="UTF-8">');
    HTML.Add('    <meta name="viewport" content="width=device-width, initial-scale=1.0">');
    HTML.Add('    <title>Dashboard de Vendas</title>');
    HTML.Add('    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>');

    HTML.Add(THtmlGeneratorCSS.GerarCSS);

    HTML.Add('</head>');
    HTML.Add('<body>');
    HTML.Add('    <main role="main">');
    HTML.Add('        <header>');
    HTML.Add('            <h1>Dashboard de Vendas</h1>');
    HTML.Add('        </header>');
    HTML.Add('');
    HTML.Add('        <nav class="filters" id="filtersContainer">');
    HTML.Add('            <!-- Filtros aplicados serão exibidos aqui -->');
    HTML.Add('        </nav>');
    HTML.Add('');
    HTML.Add('        <section class="kpis">');
    HTML.Add('            <article class="kpi-card" title="Total de Vendas realizadas no período selecionado.">');
    HTML.Add('                <h2>Total de Vendas</h2>');
    HTML.Add('                <p id="totalSales">R$ 0,00</p>');
    HTML.Add('                <div class="tooltip">Total de Vendas realizadas no período selecionado.</div>');
    HTML.Add('            </article>');
    HTML.Add('            <article class="kpi-card" title="Ticket médio das vendas no período selecionado.">');
    HTML.Add('                <h2>Ticket Médio</h2>');
    HTML.Add('                <p id="averageTicket">R$ 0,00</p>');
    HTML.Add('                <div class="tooltip">Ticket médio das vendas no período selecionado.</div>');
    HTML.Add('            </article>');
    HTML.Add('            <article class="kpi-card" title="Número total de pedidos realizados no período selecionado.">');
    HTML.Add('                <h2>Total de Pedidos</h2>');
    HTML.Add('                <p id="totalOrders">0</p>');
    HTML.Add('                <div class="tooltip">Número total de pedidos realizados no período selecionado.</div>');
    HTML.Add('            </article>');
    HTML.Add('        </section>');
    HTML.Add('');
    HTML.Add('        <section class="charts">');
    HTML.Add('            <div class="chart-container" id="salesByRegionContainer">');
    HTML.Add('                <canvas id="salesByRegionChart"></canvas>');
    HTML.Add('                <div class="tooltip">Vendas por Região</div>');
    HTML.Add('            </div>');
    HTML.Add('            <div class="chart-container" id="salesByStoreContainer">');
    HTML.Add('                <canvas id="salesByStoreChart"></canvas>');
    HTML.Add('                <div class="tooltip">Vendas por Loja</div>');
    HTML.Add('            </div>');
    HTML.Add('            <div class="chart-container" id="salesByGroupContainer">');
    HTML.Add('                <canvas id="salesByGroupChart"></canvas>');
    HTML.Add('                <div class="tooltip">Vendas por Grupo</div>');
    HTML.Add('            </div>');
    HTML.Add('            <div class="chart-container" id="salesBySubgroupContainer">');
    HTML.Add('                <canvas id="salesBySubgroupChart"></canvas>');
    HTML.Add('                <div class="tooltip">Vendas por Subgrupo</div>');
    HTML.Add('            </div>');
    HTML.Add('            <div class="chart-container" id="salesByBrandContainer">');
    HTML.Add('                <canvas id="salesByBrandChart"></canvas>');
    HTML.Add('                <div class="tooltip">Vendas por Marca</div>');
    HTML.Add('            </div>');
    HTML.Add('            <div class="chart-container" id="salesBySellerContainer">');
    HTML.Add('                <canvas id="salesBySellerChart"></canvas>');
    HTML.Add('                <div class="tooltip">Vendas por Vendedor</div>');
    HTML.Add('            </div>');
    HTML.Add('        </section>');
    HTML.Add('');
    HTML.Add('        <section>');
    HTML.Add('            <table>');
    HTML.Add('                <thead>');
    HTML.Add('                    <tr>');
    HTML.Add('                        <th>ID Pedido</th>');
    HTML.Add('                        <th>Produto</th>');
    HTML.Add('                        <th>Fornecedor</th>');
    HTML.Add('                        <th>Quantidade</th>');
    HTML.Add('                        <th>Preço de Venda</th>');
    HTML.Add('                        <th>Subtotal</th>');
    HTML.Add('                    </tr>');
    HTML.Add('                </thead>');
    HTML.Add('                <tbody id="tableContent">');
    HTML.Add('                    <!-- Dados da tabela serão inseridos aqui -->');
    HTML.Add('                </tbody>');
    HTML.Add('            </table>');
    HTML.Add('        </section>');
    HTML.Add('');
    HTML.Add('        <section class="pagination" id="pagination">');
    HTML.Add('            <!-- Botões de paginação serão adicionados aqui -->');
    HTML.Add('        </section>');
    HTML.Add('');
    HTML.Add('        <button id="exportButton">Exportar Dados</button>');
    HTML.Add('    </main>');
    HTML.Add('');
    HTML.Add('    <script>');
    HTML.Add('        const iflog = true; // Variável global para controle de logs');
    HTML.Add('');

    HTML.Add(THtmlGeneratorDataset.GerarDataset);

    HTML.Add(THtmlGeneratorCores.GerarPaletaCores);

    HTML.Add('');
    HTML.Add('        let filteredData = [...mockData];');
    HTML.Add('        let appliedFilters = { regions: [], stores: [], groups: [], subgroups: [], brands: [], sellers: [] };');
    HTML.Add('        let currentPage = 1;');
    HTML.Add('        const itemsPerPage = 10;');
    HTML.Add('');
    HTML.Add('        const filtersContainer = document.getElementById("filtersContainer");');
    HTML.Add('        const totalSalesElement = document.getElementById("totalSales");');
    HTML.Add('        const averageTicketElement = document.getElementById("averageTicket");');
    HTML.Add('        const totalOrdersElement = document.getElementById("totalOrders");');
    HTML.Add('        const salesTable = document.getElementById("tableContent");');
    HTML.Add('        const paginationContainer = document.getElementById("pagination");');
    HTML.Add('        const salesByRegionContainer = document.getElementById("salesByRegionContainer");');
    HTML.Add('        const salesByStoreContainer = document.getElementById("salesByStoreContainer");');
    HTML.Add('        const salesByGroupContainer = document.getElementById("salesByGroupContainer");');
    HTML.Add('        const salesBySubgroupContainer = document.getElementById("salesBySubgroupContainer");');
    HTML.Add('        const salesByBrandContainer = document.getElementById("salesByBrandContainer");');
    HTML.Add('        const salesBySellerContainer = document.getElementById("salesBySellerContainer");');
    HTML.Add('        let salesByRegionChart, salesByStoreChart, salesByGroupChart, salesBySubgroupChart, salesByBrandChart, salesBySellerChart;');
    HTML.Add('');
    HTML.Add('        const regionColors = {};');
    HTML.Add('        const storeColors = {};');
    HTML.Add('        const groupColors = {};');
    HTML.Add('        const subgroupColors = {};');
    HTML.Add('        const brandColors = {};');
    HTML.Add('        const sellerColors = {};');
    HTML.Add('');
    HTML.Add('        function log(message, data) {');
    HTML.Add('            if (iflog) {');
    HTML.Add('                console.log(message, data);');
    HTML.Add('            }');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function getColor(index) {');
    HTML.Add('            return colorPalette[index % colorPalette.length];');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function updateFiltersUI() {');
    HTML.Add('            filtersContainer.innerHTML = '''';');
    HTML.Add('            Object.keys(appliedFilters).forEach(filterType => {');
    HTML.Add('                appliedFilters[filterType].forEach(filter => {');
    HTML.Add('                    const filterLabel = getFilterLabel(filterType, filter);');
    HTML.Add('                    const filterItem = document.createElement("div");');
    HTML.Add('                    filterItem.className = "filter-item";');
    HTML.Add('                    filterItem.textContent = filterLabel;');
    HTML.Add('                    const removeIcon = document.createElement("span");');
    HTML.Add('                    removeIcon.textContent = "x";');
    HTML.Add('                    removeIcon.onclick = () => {');
    HTML.Add('                        appliedFilters[filterType] = appliedFilters[filterType].filter(item => item !== filter);');
    HTML.Add('                        updateDashboard();');
    HTML.Add('                    };');
    HTML.Add('                    filterItem.appendChild(removeIcon);');
    HTML.Add('                    filtersContainer.appendChild(filterItem);');
    HTML.Add('                });');
    HTML.Add('            });');
    HTML.Add('            log("Filters UI updated", appliedFilters);');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function getFilterLabel(filterType, filter) {');
    HTML.Add('            if (filterType === ''regions'') {');
    HTML.Add('                return filteredData.find(item => item.ID_REGIAO === filter).REGIAO;');
    HTML.Add('            } else if (filterType === ''stores'') {');
    HTML.Add('                return filteredData.find(item => item.ID_LOJA === filter).LOJA;');
    HTML.Add('            } else if (filterType === ''groups'') {');
    HTML.Add('                return filteredData.find(item => item.ID_GRUPO === filter).GRUPO;');
    HTML.Add('            } else if (filterType === ''subgroups'') {');
    HTML.Add('                return filteredData.find(item => item.ID_SUBGRUPO === filter).SUBGRUPO;');
    HTML.Add('            } else if (filterType === ''brands'') {');
    HTML.Add('                return filteredData.find(item => item.ID_MARCA === filter).MARCA;');
    HTML.Add('            } else if (filterType === ''sellers'') {');
    HTML.Add('                return filteredData.find(item => item.ID_VENDEDOR === filter).VENDEDOR;');
    HTML.Add('            }');
    HTML.Add('            return '''';');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function updateDashboard() {');
    HTML.Add('            disableInteractions();');
    HTML.Add('');
    HTML.Add('            filteredData = mockData.filter(item =>');
    HTML.Add('                (appliedFilters.regions.length === 0 || appliedFilters.regions.includes(item.ID_REGIAO)) &&');
    HTML.Add('                (appliedFilters.stores.length === 0 || appliedFilters.stores.includes(item.ID_LOJA)) &&');
    HTML.Add('                (appliedFilters.groups.length === 0 || appliedFilters.groups.includes(item.ID_GRUPO)) &&');
    HTML.Add('                (appliedFilters.subgroups.length === 0 || appliedFilters.subgroups.includes(item.ID_SUBGRUPO)) &&');
    HTML.Add('                (appliedFilters.brands.length === 0 || appliedFilters.brands.includes(item.ID_MARCA)) &&');
    HTML.Add('                (appliedFilters.sellers.length === 0 || appliedFilters.sellers.includes(item.ID_VENDEDOR))');
    HTML.Add('            );');
    HTML.Add('');
    HTML.Add('            filteredData.sort((a, b) => b.SUBTOTAL - a.SUBTOTAL);');
    HTML.Add('');
    HTML.Add('            updateKPIs();');
    HTML.Add('            updateCharts();');
    HTML.Add('            updateTable();');
    HTML.Add('            updateFiltersUI();');
    HTML.Add('            updatePagination();');
    HTML.Add('');
    HTML.Add('            enableInteractions();');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function updateKPIs() {');
    HTML.Add('            const totalSales = filteredData.reduce((sum, item) => sum + item.SUBTOTAL, 0);');
    HTML.Add('            const averageTicket = totalSales / filteredData.length || 0;');
    HTML.Add('');
    HTML.Add('            totalSalesElement.textContent = totalSales.toLocaleString(''pt-BR'', { style: ''currency'', currency: ''BRL'' });');
    HTML.Add('            averageTicketElement.textContent = averageTicket.toLocaleString(''pt-BR'', { style: ''currency'', currency: ''BRL'' });');
    HTML.Add('            totalOrdersElement.textContent = filteredData.length;');
    HTML.Add('');
    HTML.Add('            log("KPIs updated", { totalSales, averageTicket, totalOrders: filteredData.length });');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function assignColors(items, colorMap) {');
    HTML.Add('            items.forEach((item, index) => {');
    HTML.Add('                if (!colorMap[item]) {');
    HTML.Add('                    colorMap[item] = getColor(Object.keys(colorMap).length);');
    HTML.Add('                }');
    HTML.Add('            });');
    HTML.Add('            log("Colors assigned", colorMap);');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function updateCharts() {');
    HTML.Add('            // Vendas por Região');
    HTML.Add('            const salesByRegion = filteredData.reduce((acc, item) => {');
    HTML.Add('                if (!acc[item.ID_REGIAO]) {');
    HTML.Add('                    acc[item.ID_REGIAO] = { label: item.REGIAO, id: item.ID_REGIAO, value: 0 };');
    HTML.Add('                }');
    HTML.Add('                acc[item.ID_REGIAO].value += item.SUBTOTAL;');
    HTML.Add('                return acc;');
    HTML.Add('            }, {});');
    HTML.Add('');
    HTML.Add('            const regionEntries = Object.values(salesByRegion).sort((a, b) => b.value - a.value);');
    HTML.Add('            const regionLabels = regionEntries.map(entry => entry.label);');
    HTML.Add('            const regionData = regionEntries.map(entry => entry.value);');
    HTML.Add('');
    HTML.Add('            assignColors(regionLabels, regionColors);');
    HTML.Add('            const regionColorsArray = regionLabels.map(label => regionColors[label]);');
    HTML.Add('');
    HTML.Add('            if (salesByRegionChart) {');
    HTML.Add('                salesByRegionChart.destroy();');
    HTML.Add('            }');
    HTML.Add('');
    HTML.Add('            const ctxRegion = document.getElementById("salesByRegionChart").getContext("2d");');
    HTML.Add('');
    HTML.Add('            salesByRegionChart = new Chart(ctxRegion, {');
    HTML.Add('                type: ''bar'',');
    HTML.Add('                data: {');
    HTML.Add('                    labels: regionLabels,');
    HTML.Add('                    datasets: [{');
    HTML.Add('                        label: ''Vendas por Região'',');
    HTML.Add('                        data: regionData,');
    HTML.Add('                        backgroundColor: regionColorsArray,');
    HTML.Add('                    }]');
    HTML.Add('                },');
    HTML.Add('                options: {');
    HTML.Add('                    responsive: true,');
    HTML.Add('                    maintainAspectRatio: false,');
    HTML.Add('                    scales: {');
    HTML.Add('                        x: {');
    HTML.Add('                            ticks: {');
    HTML.Add('                                maxRotation: 45,');
    HTML.Add('                                minRotation: 45,');
    HTML.Add('                                autoSkip: true');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        y: {');
    HTML.Add('                            beginAtZero: true');
    HTML.Add('                        }');
    HTML.Add('                    },');
    HTML.Add('                    animation: {');
    HTML.Add('                        duration: 1000,');
    HTML.Add('                        easing: ''easeInOutQuad''');
    HTML.Add('                    },');
    HTML.Add('                    plugins: {');
    HTML.Add('                        tooltip: {');
    HTML.Add('                            callbacks: {');
    HTML.Add('                                label: function(context) {');
    HTML.Add('                                    let label = context.dataset.label || '''';');
    HTML.Add('                                    if (label) {');
    HTML.Add('                                        label += '': '';');
    HTML.Add('                                    }');
    HTML.Add('                                    label += new Intl.NumberFormat(''pt-BR'', { style: ''currency'', currency: ''BRL'' }).format(context.raw);');
    HTML.Add('                                    return label;');
    HTML.Add('                                }');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        title: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            text: ''Vendas por Região'',');
    HTML.Add('                            font: {');
    HTML.Add('                                size: 18');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        legend: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            position: ''bottom'',');
    HTML.Add('                            labels: {');
    HTML.Add('                                fontSize: 14,');
    HTML.Add('                                boxWidth: 20');
    HTML.Add('                            }');
    HTML.Add('                        }');
    HTML.Add('                    },');
    HTML.Add('                    onClick: (e, elements) => {');
    HTML.Add('                        if (elements.length > 0) {');
    HTML.Add('                            const index = elements[0].index;');
    HTML.Add('                            const region = regionEntries[index];');
    HTML.Add('                            toggleFilter(''regions'', region.id);');
    HTML.Add('                        }');
    HTML.Add('                    }');
    HTML.Add('                }');
    HTML.Add('            });');
    HTML.Add('');

//    HTML.Add(THtmlGeneratorJSCharts.GerarCharts);




    HTML.Add('            // Vendas por Loja');
    HTML.Add('            const salesByStore = filteredData.reduce((acc, item) => {');
    HTML.Add('                if (!acc[item.ID_LOJA]) {');
    HTML.Add('                    acc[item.ID_LOJA] = { label: item.LOJA, id: item.ID_LOJA, value: 0 };');
    HTML.Add('                }');
    HTML.Add('                acc[item.ID_LOJA].value += item.SUBTOTAL;');
    HTML.Add('                return acc;');
    HTML.Add('            }, {});');
    HTML.Add('');
    HTML.Add('            const storeEntries = Object.values(salesByStore).sort((a, b) => b.value - a.value);');
    HTML.Add('            const storeLabels = storeEntries.map(entry => entry.label);');
    HTML.Add('            const storeData = storeEntries.map(entry => entry.value);');
    HTML.Add('');
    HTML.Add('            assignColors(storeLabels, storeColors);');
    HTML.Add('            const storeColorsArray = storeLabels.map(label => storeColors[label]);');
    HTML.Add('');
    HTML.Add('            if (salesByStoreChart) {');
    HTML.Add('                salesByStoreChart.destroy();');
    HTML.Add('            }');
    HTML.Add('');
    HTML.Add('            const ctxStore = document.getElementById("salesByStoreChart").getContext("2d");');
    HTML.Add('');
    HTML.Add('            salesByStoreChart = new Chart(ctxStore, {');
    HTML.Add('                type: ''bar'',');
    HTML.Add('                data: {');
    HTML.Add('                    labels: storeLabels,');
    HTML.Add('                    datasets: [{');
    HTML.Add('                        label: ''Vendas por Loja'',');
    HTML.Add('                        data: storeData,');
    HTML.Add('                        backgroundColor: storeColorsArray,');
    HTML.Add('                    }]');
    HTML.Add('                },');
    HTML.Add('                options: {');
    HTML.Add('                    responsive: true,');
    HTML.Add('                    maintainAspectRatio: false,');
    HTML.Add('                    scales: {');
    HTML.Add('                        x: {');
    HTML.Add('                            ticks: {');
    HTML.Add('                                maxRotation: 45,');
    HTML.Add('                                minRotation: 45,');
    HTML.Add('                                autoSkip: true');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        y: {');
    HTML.Add('                            beginAtZero: true');
    HTML.Add('                        }');
    HTML.Add('                    },');
    HTML.Add('                    animation: {');
    HTML.Add('                        duration: 1000,');
    HTML.Add('                        easing: ''easeInOutQuad''');
    HTML.Add('                    },');
    HTML.Add('                    plugins: {');
    HTML.Add('                        tooltip: {');
    HTML.Add('                            callbacks: {');
    HTML.Add('                                label: function(context) {');
    HTML.Add('                                    let label = context.dataset.label || '''';');
    HTML.Add('                                    if (label) {');
    HTML.Add('                                        label += '': '';');
    HTML.Add('                                    }');
    HTML.Add('                                    label += new Intl.NumberFormat(''pt-BR'', { style: ''currency'', currency: ''BRL'' }).format(context.raw);');
    HTML.Add('                                    return label;');
    HTML.Add('                                }');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        title: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            text: ''Vendas por Loja'',');
    HTML.Add('                            font: {');
    HTML.Add('                                size: 18');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        legend: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            position: ''bottom'',');
    HTML.Add('                            labels: {');
    HTML.Add('                                fontSize: 14,');
    HTML.Add('                                boxWidth: 20');
    HTML.Add('                            }');
    HTML.Add('                        }');
    HTML.Add('                    },');
    HTML.Add('                    onClick: (e, elements) => {');
    HTML.Add('                        if (elements.length > 0) {');
    HTML.Add('                            const index = elements[0].index;');
    HTML.Add('                            const store = storeEntries[index];');
    HTML.Add('                            toggleFilter(''stores'', store.id);');
    HTML.Add('                        }');
    HTML.Add('                    }');
    HTML.Add('                }');
    HTML.Add('            });');
    HTML.Add('');
    HTML.Add('            // Vendas por Grupo');
    HTML.Add('            const salesByGroup = filteredData.reduce((acc, item) => {');
    HTML.Add('                if (!acc[item.ID_GRUPO]) {');
    HTML.Add('                    acc[item.ID_GRUPO] = { label: item.GRUPO, id: item.ID_GRUPO, value: 0 };');
    HTML.Add('                }');
    HTML.Add('                acc[item.ID_GRUPO].value += item.SUBTOTAL;');
    HTML.Add('                return acc;');
    HTML.Add('            }, {});');
    HTML.Add('');
    HTML.Add('            const groupEntries = Object.values(salesByGroup).sort((a, b) => b.value - a.value);');
    HTML.Add('            const groupLabels = groupEntries.map(entry => entry.label);');
    HTML.Add('            const groupData = groupEntries.map(entry => entry.value);');
    HTML.Add('');
    HTML.Add('            assignColors(groupLabels, groupColors);');
    HTML.Add('            const groupColorsArray = groupLabels.map(label => groupColors[label]);');
    HTML.Add('');
    HTML.Add('            if (salesByGroupChart) {');
    HTML.Add('                salesByGroupChart.destroy();');
    HTML.Add('            }');
    HTML.Add('');
    HTML.Add('            const ctxGroup = document.getElementById("salesByGroupChart").getContext("2d");');
    HTML.Add('');
    HTML.Add('            salesByGroupChart = new Chart(ctxGroup, {');
    HTML.Add('                type: ''pie'',');
    HTML.Add('                data: {');
    HTML.Add('                    labels: groupLabels,');
    HTML.Add('                    datasets: [{');
    HTML.Add('                        data: groupData,');
    HTML.Add('                        backgroundColor: groupColorsArray,');
    HTML.Add('                    }]');
    HTML.Add('                },');
    HTML.Add('                options: {');
    HTML.Add('                    responsive: true,');
    HTML.Add('                    maintainAspectRatio: false,');
    HTML.Add('                    animation: {');
    HTML.Add('                        duration: 1000,');
    HTML.Add('                        easing: ''easeInOutQuad''');
    HTML.Add('                    },');
    HTML.Add('                    plugins: {');
    HTML.Add('                        tooltip: {');
    HTML.Add('                            callbacks: {');
    HTML.Add('                                label: function(context) {');
    HTML.Add('                                    let label = context.label || '''';');
    HTML.Add('                                    if (label) {');
    HTML.Add('                                        label += '': '';');
    HTML.Add('                                    }');
    HTML.Add('                                    label += new Intl.NumberFormat(''pt-BR'', { style: ''currency'', currency: ''BRL'' }).format(context.raw);');
    HTML.Add('                                    return label;');
    HTML.Add('                                }');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        legend: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            position: ''bottom'',');
    HTML.Add('                            labels: {');
    HTML.Add('                                fontSize: 14,');
    HTML.Add('                                boxWidth: 20');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        title: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            text: ''Vendas por Grupo'',');
    HTML.Add('                            font: {');
    HTML.Add('                                size: 18');
    HTML.Add('                            }');
    HTML.Add('                        }');
    HTML.Add('                    },');
    HTML.Add('                    onClick: (e, elements) => {');
    HTML.Add('                        if (elements.length > 0) {');
    HTML.Add('                            const index = elements[0].index;');
    HTML.Add('                            const group = groupEntries[index];');
    HTML.Add('                            toggleFilter(''groups'', group.id);');
    HTML.Add('                        }');
    HTML.Add('                    }');
    HTML.Add('                }');
    HTML.Add('            });');
    HTML.Add('');
    HTML.Add('            // Vendas por Subgrupo');
    HTML.Add('            const salesBySubgroup = filteredData.reduce((acc, item) => {');
    HTML.Add('                if (!acc[item.ID_SUBGRUPO]) {');
    HTML.Add('                    acc[item.ID_SUBGRUPO] = { label: item.SUBGRUPO, id: item.ID_SUBGRUPO, value: 0 };');
    HTML.Add('                }');
    HTML.Add('                acc[item.ID_SUBGRUPO].value += item.SUBTOTAL;');
    HTML.Add('                return acc;');
    HTML.Add('            }, {});');
    HTML.Add('');
    HTML.Add('            const subgroupEntries = Object.values(salesBySubgroup).sort((a, b) => b.value - a.value);');
    HTML.Add('            const subgroupLabels = subgroupEntries.map(entry => entry.label);');
    HTML.Add('            const subgroupData = subgroupEntries.map(entry => entry.value);');
    HTML.Add('');
    HTML.Add('            assignColors(subgroupLabels, subgroupColors);');
    HTML.Add('            const subgroupColorsArray = subgroupLabels.map(label => subgroupColors[label]);');
    HTML.Add('');
    HTML.Add('            if (salesBySubgroupChart) {');
    HTML.Add('                salesBySubgroupChart.destroy();');
    HTML.Add('            }');
    HTML.Add('');
    HTML.Add('            const ctxSubgroup = document.getElementById("salesBySubgroupChart").getContext("2d");');
    HTML.Add('');
    HTML.Add('            salesBySubgroupChart = new Chart(ctxSubgroup, {');
    HTML.Add('                type: ''pie'',');
    HTML.Add('                data: {');
    HTML.Add('                    labels: subgroupLabels,');
    HTML.Add('                    datasets: [{');
    HTML.Add('                        data: subgroupData,');
    HTML.Add('                        backgroundColor: subgroupColorsArray,');
    HTML.Add('                    }]');
    HTML.Add('                },');
    HTML.Add('                options: {');
    HTML.Add('                    responsive: true,');
    HTML.Add('                    maintainAspectRatio: false,');
    HTML.Add('                    animation: {');
    HTML.Add('                        duration: 1000,');
    HTML.Add('                        easing: ''easeInOutQuad''');
    HTML.Add('                    },');
    HTML.Add('                    plugins: {');
    HTML.Add('                        tooltip: {');
    HTML.Add('                            callbacks: {');
    HTML.Add('                                label: function(context) {');
    HTML.Add('                                    let label = context.label || '''';');
    HTML.Add('                                    if (label) {');
    HTML.Add('                                        label += '': '';');
    HTML.Add('                                    }');
    HTML.Add('                                    label += new Intl.NumberFormat(''pt-BR'', { style: ''currency'', currency: ''BRL'' }).format(context.raw);');
    HTML.Add('                                    return label;');
    HTML.Add('                                }');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        legend: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            position: ''bottom'',');
    HTML.Add('                            labels: {');
    HTML.Add('                                fontSize: 14,');
    HTML.Add('                                boxWidth: 20');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        title: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            text: ''Vendas por Subgrupo'',');
    HTML.Add('                            font: {');
    HTML.Add('                                size: 18');
    HTML.Add('                            }');
    HTML.Add('                        }');
    HTML.Add('                    },');
    HTML.Add('                    onClick: (e, elements) => {');
    HTML.Add('                        if (elements.length > 0) {');
    HTML.Add('                            const index = elements[0].index;');
    HTML.Add('                            const subgroup = subgroupEntries[index];');
    HTML.Add('                            toggleFilter(''subgroups'', subgroup.id);');
    HTML.Add('                        }');
    HTML.Add('                    }');
    HTML.Add('                }');
    HTML.Add('            });');
    HTML.Add('');
    HTML.Add('            // Vendas por Marca');
    HTML.Add('            const salesByBrand = filteredData.reduce((acc, item) => {');
    HTML.Add('                if (!acc[item.ID_MARCA]) {');
    HTML.Add('                    acc[item.ID_MARCA] = { label: item.MARCA, id: item.ID_MARCA, value: 0 };');
    HTML.Add('                }');
    HTML.Add('                acc[item.ID_MARCA].value += item.SUBTOTAL;');
    HTML.Add('                return acc;');
    HTML.Add('            }, {});');
    HTML.Add('');
    HTML.Add('            const brandEntries = Object.values(salesByBrand);');
    HTML.Add('            const brandLabels = brandEntries.map(entry => entry.label);');
    HTML.Add('            const brandData = brandEntries.map(entry => entry.value);');
    HTML.Add('');
    HTML.Add('            assignColors(brandLabels, brandColors);');
    HTML.Add('            const brandColorsArray = brandLabels.map(label => brandColors[label]);');
    HTML.Add('');
    HTML.Add('            if (salesByBrandChart) {');
    HTML.Add('                salesByBrandChart.destroy();');
    HTML.Add('            }');
    HTML.Add('');
    HTML.Add('            const ctxBrand = document.getElementById("salesByBrandChart").getContext("2d");');
    HTML.Add('');
    HTML.Add('            salesByBrandChart = new Chart(ctxBrand, {');
    HTML.Add('                type: ''pie'',');
    HTML.Add('                data: {');
    HTML.Add('                    labels: brandLabels,');
    HTML.Add('                    datasets: [{');
    HTML.Add('                        data: brandData,');
    HTML.Add('                        backgroundColor: brandColorsArray,');
    HTML.Add('                    }]');
    HTML.Add('                },');
    HTML.Add('                options: {');
    HTML.Add('                    responsive: true,');
    HTML.Add('                    maintainAspectRatio: false,');
    HTML.Add('                    animation: {');
    HTML.Add('                        duration: 1000,');
    HTML.Add('                        easing: ''easeInOutQuad''');
    HTML.Add('                    },');
    HTML.Add('                    plugins: {');
    HTML.Add('                        tooltip: {');
    HTML.Add('                            callbacks: {');
    HTML.Add('                                label: function(context) {');
    HTML.Add('                                    let label = context.label || '''';');
    HTML.Add('                                    if (label) {');
    HTML.Add('                                        label += '': '';');
    HTML.Add('                                    }');
    HTML.Add('                                    label += new Intl.NumberFormat(''pt-BR'', { style: ''currency'', currency: ''BRL'' }).format(context.raw);');
    HTML.Add('                                    return label;');
    HTML.Add('                                }');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        legend: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            position: ''bottom'',');
    HTML.Add('                            labels: {');
    HTML.Add('                                fontSize: 14,');
    HTML.Add('                                boxWidth: 20');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        title: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            text: ''Vendas por Marca'',');
    HTML.Add('                            font: {');
    HTML.Add('                                size: 18');
    HTML.Add('                            }');
    HTML.Add('                        }');
    HTML.Add('                    },');
    HTML.Add('                    onClick: (e, elements) => {');
    HTML.Add('                        if (elements.length > 0) {');
    HTML.Add('                            const index = elements[0].index;');
    HTML.Add('                            const brand = brandEntries[index];');
    HTML.Add('                            toggleFilter(''brands'', brand.id);');
    HTML.Add('                        }');
    HTML.Add('                    }');
    HTML.Add('                }');
    HTML.Add('            });');
    HTML.Add('');
    HTML.Add('            // Vendas por Vendedor');
    HTML.Add('            const salesBySeller = filteredData.reduce((acc, item) => {');
    HTML.Add('                if (!acc[item.ID_VENDEDOR]) {');
    HTML.Add('                    acc[item.ID_VENDEDOR] = { label: item.VENDEDOR, id: item.ID_VENDEDOR, value: 0 };');
    HTML.Add('                }');
    HTML.Add('                acc[item.ID_VENDEDOR].value += item.SUBTOTAL;');
    HTML.Add('                return acc;');
    HTML.Add('            }, {});');
    HTML.Add('');
    HTML.Add('            const sellerEntries = Object.values(salesBySeller).sort((a, b) => b.value - a.value);');
    HTML.Add('            const sellerLabels = sellerEntries.map(entry => entry.label);');
    HTML.Add('            const sellerData = sellerEntries.map(entry => entry.value);');
    HTML.Add('');
    HTML.Add('            assignColors(sellerLabels, sellerColors);');
    HTML.Add('            const sellerColorsArray = sellerLabels.map(label => sellerColors[label]);');
    HTML.Add('');
    HTML.Add('            if (salesBySellerChart) {');
    HTML.Add('                salesBySellerChart.destroy();');
    HTML.Add('            }');
    HTML.Add('');
    HTML.Add('            const ctxSeller = document.getElementById("salesBySellerChart").getContext("2d");');
    HTML.Add('');
    HTML.Add('            salesBySellerChart = new Chart(ctxSeller, {');
    HTML.Add('                type: ''bar'',');
    HTML.Add('                data: {');
    HTML.Add('                    labels: sellerLabels,');
    HTML.Add('                    datasets: [{');
    HTML.Add('                        label: ''Vendas por Vendedor'',');
    HTML.Add('                        data: sellerData,');
    HTML.Add('                        backgroundColor: sellerColorsArray,');
    HTML.Add('                    }]');
    HTML.Add('                },');
    HTML.Add('                options: {');
    HTML.Add('                    responsive: true,');
    HTML.Add('                    maintainAspectRatio: false,');
    HTML.Add('                    scales: {');
    HTML.Add('                        x: {');
    HTML.Add('                            ticks: {');
    HTML.Add('                                maxRotation: 45,');
    HTML.Add('                                minRotation: 45,');
    HTML.Add('                                autoSkip: true');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        y: {');
    HTML.Add('                            beginAtZero: true');
    HTML.Add('                        }');
    HTML.Add('                    },');
    HTML.Add('                    animation: {');
    HTML.Add('                        duration: 1000,');
    HTML.Add('                        easing: ''easeInOutQuad''');
    HTML.Add('                    },');
    HTML.Add('                    plugins: {');
    HTML.Add('                        tooltip: {');
    HTML.Add('                            callbacks: {');
    HTML.Add('                                label: function(context) {');
    HTML.Add('                                    let label = context.dataset.label || '''';');
    HTML.Add('                                    if (label) {');
    HTML.Add('                                        label += '': '';');
    HTML.Add('                                    }');
    HTML.Add('                                    label += new Intl.NumberFormat(''pt-BR'', { style: ''currency'', currency: ''BRL'' }).format(context.raw);');
    HTML.Add('                                    return label;');
    HTML.Add('                                }');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        title: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            text: ''Vendas por Vendedor'',');
    HTML.Add('                            font: {');
    HTML.Add('                                size: 18');
    HTML.Add('                            }');
    HTML.Add('                        },');
    HTML.Add('                        legend: {');
    HTML.Add('                            display: true,');
    HTML.Add('                            position: ''bottom'',');
    HTML.Add('                            labels: {');
    HTML.Add('                                fontSize: 14,');
    HTML.Add('                                boxWidth: 20');
    HTML.Add('                            }');
    HTML.Add('                        }');
    HTML.Add('                    },');
    HTML.Add('                    onClick: (e, elements) => {');
    HTML.Add('                        if (elements.length > 0) {');
    HTML.Add('                            const index = elements[0].index;');
    HTML.Add('                            const seller = sellerEntries[index];');
    HTML.Add('                            toggleFilter(''sellers'', seller.id);');
    HTML.Add('                        }');
    HTML.Add('                    }');
    HTML.Add('                }');
    HTML.Add('            });');
    HTML.Add('');
    HTML.Add('            log("Charts updated", { salesByRegion, salesByStore, salesByGroup, salesBySubgroup, salesByBrand, salesBySeller });');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function toggleFilter(type, id) {');
    HTML.Add('            if (appliedFilters[type].includes(id)) {');
    HTML.Add('                appliedFilters[type] = appliedFilters[type].filter(item => item !== id);');
    HTML.Add('            } else {');
    HTML.Add('                appliedFilters[type].push(id);');
    HTML.Add('            }');
    HTML.Add('            log("Filter toggled", { type, id, appliedFilters });');
    HTML.Add('            updateDashboard();');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function updateTable() {');
    HTML.Add('            salesTable.innerHTML = '''';');
    HTML.Add('');
    HTML.Add('            const start = (currentPage - 1) * itemsPerPage;');
    HTML.Add('            const end = start + itemsPerPage;');
    HTML.Add('            const paginatedData = filteredData.slice(start, end);');
    HTML.Add('');
    HTML.Add('            paginatedData.forEach(item => {');
    HTML.Add('                const row = document.createElement("tr");');
    HTML.Add('                row.innerHTML = `');
    HTML.Add('                    <td>${item.ID_PEDIDO}</td>');
    HTML.Add('                    <td>${item.PRODUTO}</td>');
    HTML.Add('                    <td>${item.MARCA}</td>');
    HTML.Add('                    <td style="text-align: right;">${item.QUANTIDADE}</td>');
    HTML.Add('                    <td style="text-align: right;">${item.PRECO_VENDA.toLocaleString(''pt-BR'', { style: ''currency'', currency: ''BRL'' })}</td>');
    HTML.Add('                    <td style="text-align: right;">${item.SUBTOTAL.toLocaleString(''pt-BR'', { style: ''currency'', currency: ''BRL'' })}</td>');
    HTML.Add('                `;');
    HTML.Add('                salesTable.appendChild(row);');
    HTML.Add('            });');
    HTML.Add('');
    HTML.Add('            log("Table updated", paginatedData);');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function updatePagination() {');
    HTML.Add('            paginationContainer.innerHTML = '''';');
    HTML.Add('');
    HTML.Add('            const totalPages = Math.ceil(filteredData.length / itemsPerPage);');
    HTML.Add('            for (let i = 1; i <= totalPages; i++) {');
    HTML.Add('                const button = document.createElement("button");');
    HTML.Add('                button.textContent = i;');
    HTML.Add('                if (i === currentPage) {');
    HTML.Add('                    button.classList.add(''disabled'');');
    HTML.Add('                }');
    HTML.Add('                button.addEventListener(''click'', () => {');
    HTML.Add('                    currentPage = i;');
    HTML.Add('                    updateTable();');
    HTML.Add('                    updatePagination();');
    HTML.Add('                });');
    HTML.Add('                paginationContainer.appendChild(button);');
    HTML.Add('            }');
    HTML.Add('');
    HTML.Add('            log("Pagination updated", { currentPage, totalPages });');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        document.getElementById("exportButton").addEventListener("click", () => {');
    HTML.Add('            const csvData = [];');
    HTML.Add('            csvData.push(["ID Pedido", "Produto", "Marca", "Quantidade", "Preço de Venda", "Subtotal"]);');
    HTML.Add('            filteredData.forEach(item => {');
    HTML.Add('                csvData.push([');
    HTML.Add('                    item.ID_PEDIDO,');
    HTML.Add('                    item.PRODUTO,');
    HTML.Add('                    item.MARCA,');
    HTML.Add('                    item.QUANTIDADE,');
    HTML.Add('                    item.PRECO_VENDA,');
    HTML.Add('                    item.SUBTOTAL');
    HTML.Add('                ]);');
    HTML.Add('            });');
    HTML.Add('            const csvContent = "data:text/csv;charset=utf-8,"');
    HTML.Add('                + csvData.map(e => e.join(",")).join("\n");');
    HTML.Add('            const encodedUri = encodeURI(csvContent);');
    HTML.Add('            const link = document.createElement("a");');
    HTML.Add('            link.setAttribute("href", encodedUri);');
    HTML.Add('            link.setAttribute("download", "dados_vendas.csv");');
    HTML.Add('            document.body.appendChild(link);');
    HTML.Add('            link.click();');
    HTML.Add('');
    HTML.Add('            log("Data exported", csvData);');
    HTML.Add('        });');
    HTML.Add('');
    HTML.Add('        async function fetchData() {');
    HTML.Add('            try {');
    HTML.Add('                const response = await fetch(''url_to_your_data_endpoint''); // Substitua pelo URL da sua API');
    HTML.Add('                const data = await response.json();');
    HTML.Add('                mockData = data; // Atualize os dados mock com os dados reais');
    HTML.Add('                updateDashboard();');
    HTML.Add('            } catch (error) {');
    HTML.Add('                console.error(''Error fetching data:'', error);');
    HTML.Add('            }');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function disableInteractions() {');
    HTML.Add('            document.querySelectorAll(''.chart-container'').forEach(container => {');
    HTML.Add('                container.style.pointerEvents = ''none'';');
    HTML.Add('            });');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        function enableInteractions() {');
    HTML.Add('            document.querySelectorAll(''.chart-container'').forEach(container => {');
    HTML.Add('                container.style.pointerEvents = ''auto'';');
    HTML.Add('            });');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        // Inicializar gráficos vazios');
    HTML.Add('        function initializeCharts() {');
    HTML.Add('            salesByRegionChart = new Chart(document.getElementById("salesByRegionChart").getContext("2d"), {');
    HTML.Add('                type: ''bar'',');
    HTML.Add('                data: { labels: [], datasets: [{ label: ''Vendas por Região'', data: [], backgroundColor: [] }] },');
    HTML.Add('                options: { responsive: true, maintainAspectRatio: false }');
    HTML.Add('            });');
    HTML.Add('            salesByStoreChart = new Chart(document.getElementById("salesByStoreChart").getContext("2d"), {');
    HTML.Add('                type: ''bar'',');
    HTML.Add('                data: { labels: [], datasets: [{ label: ''Vendas por Loja'', data: [], backgroundColor: [] }] },');
    HTML.Add('                options: { responsive: true, maintainAspectRatio: false }');
    HTML.Add('            });');
    HTML.Add('            salesByGroupChart = new Chart(document.getElementById("salesByGroupChart").getContext("2d"), {');
    HTML.Add('                type: ''pie'',');
    HTML.Add('                data: { labels: [], datasets: [{ data: [], backgroundColor: [] }] },');
    HTML.Add('                options: { responsive: true, maintainAspectRatio: false }');
    HTML.Add('            });');
    HTML.Add('            salesBySubgroupChart = new Chart(document.getElementById("salesBySubgroupChart").getContext("2d"), {');
    HTML.Add('                type: ''pie'',');
    HTML.Add('                data: { labels: [], datasets: [{ data: [], backgroundColor: [] }] },');
    HTML.Add('                options: { responsive: true, maintainAspectRatio: false }');
    HTML.Add('            });');
    HTML.Add('            salesByBrandChart = new Chart(document.getElementById("salesByBrandChart").getContext("2d"), {');
    HTML.Add('                type: ''pie'',');
    HTML.Add('                data: { labels: [], datasets: [{ data: [], backgroundColor: [] }] },');
    HTML.Add('                options: { responsive: true, maintainAspectRatio: false }');
    HTML.Add('            });');
    HTML.Add('            salesBySellerChart = new Chart(document.getElementById("salesBySellerChart").getContext("2d"), {');
    HTML.Add('                type: ''bar'',');
    HTML.Add('                data: { labels: [], datasets: [{ label: ''Vendas por Vendedor'', data: [], backgroundColor: [] }] },');
    HTML.Add('                options: { responsive: true, maintainAspectRatio: false }');
    HTML.Add('            });');
    HTML.Add('        }');
    HTML.Add('');
    HTML.Add('        // Carregar gráficos inicialmente vazios');
    HTML.Add('        initializeCharts();');
    HTML.Add('');
    HTML.Add('        // Buscar dados e atualizar dashboard');
    HTML.Add('        fetchData();');
    HTML.Add('');
    HTML.Add('        window.addEventListener("resize", () => {');
    HTML.Add('            updateCharts();');
    HTML.Add('            log("Window resized", { width: window.innerWidth, height: window.innerHeight });');
    HTML.Add('        });');
    HTML.Add('');
    HTML.Add('        // Simular delay para exibir dados mock (exemplo)');
    HTML.Add('        setTimeout(() => {');
    HTML.Add('            updateDashboard();');
    HTML.Add('        }, 1000);');






    HTML.Add('    </script>');
    HTML.Add('</body>');
    HTML.Add('</html>');
    HTML.Add('');

    form1.memoLog.Text :=HTML.Text;
Result := UTF8Encode(HTML.Text);
//    Result := HTML.Text;
  finally
    HTML.Free;
  end;
end;

end.


